datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ACCOUNT_ADMIN
  USER
}

enum DictionaryKey {
  HOLA
}

enum MessageStatus {
  DRAFT
  SENT
  SCHEDULED
  ERROR
}

enum TemplateStatus {
  NOT_SENT
  ACTIVE
  ERROR
}

model Account {
  // PK
  id String @id @db.Uuid

  // Main fields
  companyName   String
  vat           String
  street        String
  addressNumber String
  postalCode    String
  region        String  @db.VarChar(2)
  country       String  @db.VarChar(2)
  disabled      Boolean @default(false)

  // Relations
  MetaAccount  MetaAccount?
  User         User[]
  Contact      Contact[]
  Category     Category[]
  Template     Template[]
  Message      Message[]
  AccountPhone AccountPhone[]
}

model User {
  // PK
  accountId String @db.Uuid
  id        String @db.Uuid

  // Main fields
  username String  @unique
  mail     String?
  role     Role

  // Generic fields
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  //Relation
  Account Account @relation(fields: [accountId], references: [id])

  @@id([accountId, id])
}

model Contact {
  // PK
  accountId String @db.Uuid
  id        String @db.Uuid

  // Main fields
  name     String
  lastName String?
  prefix   String
  number   String

  // Generic fields
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Relations
  Account Account   @relation(fields: [accountId], references: [id])
  Message Message[]

  @@id([accountId, id])
}

model Category {
  // PK
  accountId String @db.Uuid
  id        String @db.Uuid

  // Main fields
  name        String
  description String?
  disabled    Boolean @default(false)

  // Generic fields
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  //Relations
  Account  Account    @relation(fields: [accountId], references: [id])
  Template Template[]
  Message  Message[]

  @@id([accountId, id])
}

model Template {
  // PK
  accountId String @db.Uuid
  id        String @db.Uuid

  // Main fields
  name             String
  status           TemplateStatus
  shortDescription String?
  preview          String?
  variable1        String?
  variable2        String?
  variable3        String?
  disabled         Boolean        @default(false)
  categoryId       String?        @db.Uuid

  // Generic fields
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Relation
  Account  Account   @relation(fields: [accountId], references: [id])
  Message  Message[]
  Category Category? @relation(fields: [accountId, categoryId], references: [accountId, id])

  @@id([accountId, id])
}

model Message {
  // PK
  accountId String @db.Uuid
  id        String @db.Uuid

  // Main fields
  status         MessageStatus
  sentDate       DateTime
  scheduled      Boolean
  scheduleDate   DateTime?
  variable1      String?
  variable2      String?
  variable3      String?
  templateId     String        @db.Uuid
  accountPhoneId String        @db.Uuid
  contactId      String        @db.Uuid
  categoryId     String?       @db.Uuid

  // Generic fields
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  Account      Account      @relation(fields: [accountId], references: [id])
  Template     Template     @relation(fields: [accountId, templateId], references: [accountId, id])
  AccountPhone AccountPhone @relation(fields: [accountId, accountPhoneId], references: [accountId, id])
  Contact      Contact      @relation(fields: [accountId, contactId], references: [accountId, id])
  Category     Category?    @relation(fields: [accountId, categoryId], references: [accountId, id])

  @@id([accountId, id])
}

model AccountPhone {
  // PK
  accountId String @db.Uuid
  id        String @db.Uuid

  // Main fields
  prefix   String
  number   String
  disabled Boolean @default(false)

  // Generic fields
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  //Relations
  Account Account   @relation(fields: [accountId], references: [id])
  Message Message[]

  @@id([accountId, id])
}

// ************//
//  MASTERDATA //
// ************//

model Dictionary {
  // PK
  id    String        @id @db.Uuid
  key   DictionaryKey
  value String

  dictionaryText DictionaryText[]

  @@unique([key, value])
}

model DictionaryText {
  // PK
  id String @id @db.Uuid

  key      DictionaryKey
  language String        @db.VarChar(2)
  value    String
  text     String

  // Relation
  Dictionary Dictionary @relation(fields: [key, value], references: [key, value])

  @@unique([key, language, value])
}

model MetaAccount {
  // PK
  id        String   @id @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Relation
  accountId String @unique @db.Uuid

  Account Account @relation(fields: [accountId], references: [id])
}

datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ACCOUNT_ADMIN
  USER
}

enum DictionaryKey {
  HOLA
}

enum MessageStatus {
  DRAFT
  SENT
  PENDING
  SCHEDULED
  ERROR
}

enum TemplateStatus {
  NOT_SENT
  ACTIVE
  ERROR
}

model Account {
  // PK
  id String @id @db.Uuid

  // Main fields
  companyName   String
  vat           String
  street        String
  addressNumber String
  postalCode    String
  region        String  @db.VarChar(2)
  country       String  @db.VarChar(2)
  disabled      Boolean @default(false)

  metaAccountId String @unique @db.Uuid

  // Relations
  metaAccount           MetaAccount             @relation(fields: [metaAccountId], references: [id])
  user                  User[]
  contact               Contact[]
  category              Category[]
  template              Template[]
  message               Message[]
  accountPhone          AccountPhone[]
  templatesOnCategories TemplatesOnCategories[]
}

model User {
  // PK
  accountId String @db.Uuid
  id        String @db.Uuid

  // Main fields
  username String  @unique
  mail     String?
  role     Role

  // Generic fields
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  //Relation
  account Account @relation(fields: [accountId], references: [id])

  @@id([accountId, id])
}

model Contact {
  // PK
  accountId String @db.Uuid
  id        String @db.Uuid

  // Main fields
  name     String
  lastName String?
  prefix   String
  number   String

  // Generic fields
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Relations
  account Account   @relation(fields: [accountId], references: [id])
  message Message[]

  @@id([accountId, id])
}

model Category {
  // PK
  accountId String @db.Uuid
  id        String @db.Uuid

  // Main fields
  name        String
  description String?
  disabled    Boolean @default(false)

  // Generic fields
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  //Relations
  account   Account                 @relation(fields: [accountId], references: [id])
  templates TemplatesOnCategories[]

  @@id([accountId, id])
}

model Template {
  // PK
  accountId String @db.Uuid
  id        String @db.Uuid

  // Main fields
  name        String
  status      TemplateStatus
  description String?
  preview     String?
  variable1   String?
  variable2   String?
  variable3   String?
  disabled    Boolean        @default(false)
  // categoryId  String?        @db.Uuid

  // Generic fields
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Relation
  account    Account                 @relation(fields: [accountId], references: [id])
  message    Message[]
  categories TemplatesOnCategories[]

  @@id([accountId, id])
}

model TemplatesOnCategories {
  // PK
  accountId  String @db.Uuid
  categoryId String @db.Uuid
  templateId String @db.Uuid

  account  Account  @relation(fields: [accountId], references: [id])
  category Category @relation(fields: [accountId, categoryId], references: [accountId, id])
  template Template @relation(fields: [accountId, templateId], references: [accountId, id])

  @@id([accountId, categoryId, templateId])
}

model Message {
  // PK
  accountId String @db.Uuid
  id        String @db.Uuid

  // Main fields
  status         MessageStatus
  sentDate       DateTime?
  scheduleDate   DateTime?
  parameter1     String?
  parameter2     String?
  parameter3     String?
  templateId     String        @db.Uuid
  accountPhoneId String        @db.Uuid
  contactId      String        @db.Uuid

  // Generic fields
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  account      Account      @relation(fields: [accountId], references: [id])
  template     Template     @relation(fields: [accountId, templateId], references: [accountId, id])
  accountPhone AccountPhone @relation(fields: [accountId, accountPhoneId], references: [accountId, id])
  contact      Contact      @relation(fields: [accountId, contactId], references: [accountId, id])

  @@id([accountId, id])
}

model AccountPhone {
  // PK
  accountId String @db.Uuid
  id        String @db.Uuid

  // Main fields
  prefix   String
  number   String
  disabled Boolean @default(false)

  // Generic fields
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  //Relations
  account Account   @relation(fields: [accountId], references: [id])
  message Message[]

  @@id([accountId, id])
}

// ************//
//  MASTERDATA //
// ************//

model Dictionary {
  // PK
  id    String        @id @db.Uuid
  key   DictionaryKey
  value String

  dictionaryText DictionaryText[]

  @@unique([key, value])
}

model DictionaryText {
  // PK
  id String @id @db.Uuid

  key      DictionaryKey
  language String        @db.VarChar(2)
  value    String
  text     String

  // Relation
  dictionary Dictionary @relation(fields: [key, value], references: [key, value])

  @@unique([key, language, value])
}

model MetaAccount {
  // PK
  id        String   @id @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // // Relation
  // accountId String  @db.Uuid

  account Account?
}
